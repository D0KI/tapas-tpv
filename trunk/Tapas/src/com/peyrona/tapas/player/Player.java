/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.peyrona.tapas.player;

import com.peyrona.tapas.Utils;
import com.peyrona.tapas.persistence.DataProvider;
import com.peyrona.tapas.swing.SwingUtils;
import java.io.File;
import java.util.Hashtable;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JSlider;

/**
 * Player: sencillo y simple reproductor de música.
 * Es una JInternalFrame que, una vez creada puede estar visible o no, pero
 * siempre existe, para que este modo, pueda reproducir música en una imitación
 * de "background".<br>
 * El truco consiste en hacerla HIDE_ON_CLOSE.
 *
 * @author peyrona
 */

// TODO: Esta clase contiene casi toda su funcionalidad Swing, pero le falta
//       la funcionalidad JMF. A este respecto hay dos webs interesantes:
//           * http://fmj-sf.net/
//           * http://www.lcc.uma.es/~pinilla/TutorialJMF/Reproduccion.htm

public class Player extends javax.swing.JInternalFrame
{
    private static final String IS_PLAYING = "isPlaying";
    private static final String IS_PAUSED  = "isPaused";

    private static Player instance;

    private PlayList playList;
    private boolean  bRandom;

    //------------------------------------------------------------------------//

    public static Player getInstance()
    {
        synchronized( Player.class )
        {
            if( instance == null )
                instance = new Player();
        }

        return instance;
    }

    //------------------------------------------------------------------------//

    private void onPlayPause()
    {
        if( isPlaying() )
        {
            btnPlayPause.setIcon( new ImageIcon( getClass().getResource( "images/play.png" ) ) );
            btnPlayPause.setName( IS_PAUSED );
            lblInfo.setText( "El reprodutor está en pausa" );
        }
        else
        {
            btnPlayPause.setIcon( new ImageIcon( getClass().getResource( "images/pause.png" ) ) );
            btnPlayPause.setName( IS_PLAYING );
            lblInfo.setText( "El reproductor está reproduciendo música" );
        }
    }

    private void onEject()
    {
        File folder = SwingUtils.folderChooser();

        if( folder != null )
            playList.loadPlayList( folder );
    }

    private void onRandom()
    {
        String sMsg = "El reprodutor está en modo 'reproducción ";

        bRandom = btnRandom.isSelected();
        lblInfo.setText( sMsg + (bRandom ? "aleatoria'" : "secuencial'") );
    }

    private void onVolume()
    {
        // TODO: Hacerlo
    }

    // Inicialmente, el nombre de btbPlayPause es null, por lo que éste método
    // devolverá acertadamente (ya que NO se está playing) false, el resto
    // de las veces funcionará de "modo normal", devolviendo tb valores correctos.
    private boolean isPlaying()
    {
        return (IS_PLAYING.equals( btnPlayPause.getName() ));
    }

    /** Creates new form Player */
    private Player()
    {
        initComponents();

        // Etiquetas para el slider de volumen: se utiliza una Collection obsoleta
        // porque así lo exige JSlider en la versión actual (JDK 1.6.x) de Swing.
        Hashtable<Integer, JLabel> labels = new Hashtable<Integer, JLabel>();
                                   labels.put( sldVolume.getMinimum(), new JLabel( "Min" ) );
                                   labels.put( sldVolume.getMaximum(), new JLabel( "Max" ) );
        sldVolume.setLabelTable( labels );
        sldVolume.setPaintLabels( true );

        // Que quede todo en su sitio
        btnRandom.doClick();

        // Cargamos la lista de reproducción
        String sBaseFolder = DataProvider.getInstance().getConfiguration().getMusicFolder();
        
        playList = new PlayList();
        spTable.setViewportView( playList );

        if( Utils.isEmpty( sBaseFolder ) )
            onEject();
        else
            playList.loadPlayList( new File( sBaseFolder ) );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnEject = new javax.swing.JButton();
        sldVolume = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        btnPlayPause = new javax.swing.JButton();
        btnRandom = new javax.swing.JToggleButton();
        spTable = new javax.swing.JScrollPane();
        lblInfo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reproductor de música");
        setPreferredSize(new java.awt.Dimension(600, 360));

        btnEject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peyrona/tapas/player/images/eject.png"))); // NOI18N
        btnEject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjectActionPerformed(evt);
            }
        });

        sldVolume.setMajorTickSpacing(10);
        sldVolume.setPaintTicks(true);
        sldVolume.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldVolumeStateChanged(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peyrona/tapas/player/images/volume.png"))); // NOI18N

        btnPlayPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peyrona/tapas/player/images/play.png"))); // NOI18N
        btnPlayPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayPauseActionPerformed(evt);
            }
        });

        btnRandom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peyrona/tapas/player/images/random.png"))); // NOI18N
        btnRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomActionPerformed(evt);
            }
        });

        lblInfo.setText("Info");

        jLabel2.setForeground(new java.awt.Color(168, 9, 37));
        jLabel2.setText("Este módulo");

        jLabel3.setForeground(new java.awt.Color(166, 20, 30));
        jLabel3.setText("está inacabado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spTable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnPlayPause, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEject, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sldVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnEject, btnPlayPause, btnRandom});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPlayPause, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(btnEject, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(btnRandom, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(sldVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTable, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlayPauseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPlayPauseActionPerformed
    {//GEN-HEADEREND:event_btnPlayPauseActionPerformed
        onPlayPause();
    }//GEN-LAST:event_btnPlayPauseActionPerformed

    private void sldVolumeStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_sldVolumeStateChanged
    {//GEN-HEADEREND:event_sldVolumeStateChanged
        JSlider slider = (JSlider) evt.getSource();

        if( ! slider.getValueIsAdjusting() )
            onVolume();
    }//GEN-LAST:event_sldVolumeStateChanged

    private void btnRandomActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRandomActionPerformed
    {//GEN-HEADEREND:event_btnRandomActionPerformed
        onRandom();
    }//GEN-LAST:event_btnRandomActionPerformed

    private void btnEjectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnEjectActionPerformed
    {//GEN-HEADEREND:event_btnEjectActionPerformed
        onEject();
    }//GEN-LAST:event_btnEjectActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEject;
    private javax.swing.JButton btnPlayPause;
    private javax.swing.JToggleButton btnRandom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JSlider sldVolume;
    private javax.swing.JScrollPane spTable;
    // End of variables declaration//GEN-END:variables
}